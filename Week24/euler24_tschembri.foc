1.00 C EULER24 in FOCAL-8 (FOR PDP-8) - 1967
1.01 C FROM THE DEC DOCUMENTATION: 
1.02 C "For the more sophisticated user, the powers of FOCAL can be expanded by incorporating some of the
1.03 C additional system segments. These capabilities include 8K, to give the user more memory space for large programs."
1.04 C - Nobody needs more that 8K -
1.05 C Download FOCAL-69 FROM https://github.com/AndrewSav/focal-69 then build it ( make / make install )

1.1 S N=1000000-1; 
1.2 F I=0,9; S S(I)=I; 
1.3 S P=10
1.4 F K=1,1,10; DO 2; S P=P-1
1.5 Q

2.0 C
2.1 S SF=P-1
2.2 S NF=1; DO 3
2.3 S SF=NF
2.4 S Q=FITR(N/SF)
2.5 S N=N-(Q*SF)
2.6 T %4.0,S(Q),#!
2.7 F J=Q,P-1; S S(J)=S(J+1) 

3.0 C FACTORIAL (RECURSIVE!)
3.1 IF (SF-1) 3.3,3.3; S SF=SF-1; DO 3
3.2 S SF=SF+1 ; S NF=NF*SF
3.3 R 

G

--- output:

$ /usr/local/bin/focal /cygdrive/d/tmp/euler24.foc
=    2
=    7
=    8
=    3
=    9
=    1
=    5
=    4
=    6
=    0

--- here are the explanations, I couldn't insert them in the code without renumbering the whole program, I don't want to.

Here is the gist of the algorithm works:

We will use an array of 10 numbers [0,1,2,3,4,5,6,7,8,9]

The 1st digit position will be 999999 / 9! = 2 -> array[2] = 2 -> 1st number is 2
The remainder of the 999999 / 9! is 274239

We remove the element at index 2, the array is now [0,1,3,4,5,6,7,8,9]

The 2nd digit position will be 274239 / 8! = 6 -> array[6] = 7 -> 2nd number is 7
The remainder of 274239 / 8! is 32319 

and so on.

Why? well, we can consider that all the permutations can be represented as a table, when we start, we have 10 columns, 
all the 9! permutations starting with 0 are in column 0, all the 9! permutations starting with 1 are in column 1 and so on. 
Dividing by 9! give the column, all the elements in the column start with the same number, this number is the 1st number 
of the solution. The remaining of the division gives the position of the complete solution. 
We remove it from the list, now the permutations of the remaining numbers can be arranged in table with 9 colums. 
Each column contains 8! permutation. We know where the solution is from the previous division, so we do the same thing 
again, until the array is empty.
