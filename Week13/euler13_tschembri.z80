; I didn't have time to do the string to binary conversion, so it is done by
; the little Java program at the end.
; The bytes are reversed because the Z80 is a little endian CPU and Java uses
; big endian internally
 
    LD      B,100           ; 100 numbers
    LD      DE,n2           ; start adding numbers starting at n2          
L1:        
    LD      HL,numbers      ; the numbers will be added at this location
    CALL    AddNumbers      ; call add
    DJNZ    L1              ; decrements B and loop until B > 0
    
    ; here, the sum is in the memory starting at the "numbers" label
    ; reverse the result to put it in big endian to be converted back by Java
    
    LD      BC,22           ; 22 bytes to revert
    LD      DE,numbers+21   ; start at "numbers" + 21 bytes
    LD      HL,result       ; the reverted sum will be put in the memory starting at "result"
L2: LD      A,(DE)          ; read source
    LD      (HL),A          ; write destination
    CPI                     ; increments HL and decrements BC
    DEC     DE              ; decrements DE
    JP      PE,L2           ; loops until BC > 0
    
    HALT
    
    ; this subroutine adds two 22 bytes numbers
    ; first number address is in HL
    ; second number address is in DE
    ; result is stored in address pointed by HL
    
AddNumbers:
    PUSH    BC              ; saves BC
    OR      A               ; clear status flag
    LD      BC,22           ; BC = 22 ( 22 bytes to sum )
AddLoop:    
    LD      A,(DE)          ; loads byte pointed by DE into A
    ADC     A,(HL)          ; add byte pointed by HL to A and add the carry of the previous ADD
    LD      (HL),A          ; put A in address pointed by HL
    INC     DE              ; increments DE 
    CPI                     ; increments HL and decrements BC
    JP      PE,AddLoop      ; loops until BC > 0    
    POP     BC              ; restore BC value
    RET                     ; return

    org $1000               ; start assembly at $1000
    
result:

    dsb 22        

; these bytes arrays are generated by the Java program (see lower)

numbers:     

    db $5A,$07,$02,$E8,$8F,$BA,$A5,$EA,$BF,$FB,$A1,$00,$71,$B5,$BC,$19,$38,$52,$CC,$63,$19,$00

n2:
    
    db $3A,$CC,$D9,$81,$F5,$40,$24,$33,$22,$ED,$AC,$29,$BF,$BF,$27,$D1,$3C,$CF,$7D,$BB,$1F,$00
    db $BD,$F1,$8F,$AD,$4C,$25,$D5,$94,$4A,$2C,$D3,$9E,$53,$AE,$EB,$36,$12,$A6,$EF,$DA,$32,$00
    db $5A,$12,$70,$48,$D9,$CA,$6F,$2C,$8C,$4A,$9D,$00,$5C,$CE,$77,$72,$C3,$6F,$CF,$E8,$3E,$00
    db $54,$85,$99,$70,$1D,$36,$53,$43,$14,$2D,$BA,$10,$FF,$0D,$AF,$A4,$06,$6E,$92,$C8,$0F,$00
    db $25,$CF,$5D,$02,$06,$C6,$74,$B7,$95,$00,$87,$82,$E7,$86,$DB,$19,$0A,$BF,$47,$13,$3D,$00
    db $22,$73,$7F,$0B,$8E,$D3,$A4,$7C,$CE,$54,$C6,$6B,$BD,$A1,$B0,$60,$41,$21,$51,$3C,$13,$00
    db $86,$63,$7D,$D9,$1C,$01,$44,$01,$1E,$65,$38,$66,$3D,$54,$00,$A3,$74,$16,$2D,$4B,$1E,$00
    db $7C,$29,$C9,$24,$03,$B3,$42,$35,$B4,$3F,$E3,$BE,$A3,$98,$B5,$8C,$D2,$6A,$B4,$77,$20,$00
    db $67,$87,$3F,$A0,$27,$BC,$E6,$B2,$2D,$F0,$61,$42,$75,$B4,$F0,$1F,$4B,$32,$0F,$29,$30,$00
    db $33,$52,$36,$CC,$25,$35,$02,$41,$1A,$A1,$32,$73,$D6,$ED,$BB,$FD,$DE,$C3,$F8,$8A,$2A,$00
    db $A2,$1B,$AF,$DC,$2C,$81,$24,$58,$6E,$8D,$72,$68,$C4,$94,$5C,$15,$47,$81,$25,$69,$2C,$00
    db $87,$DE,$77,$AC,$85,$FC,$02,$64,$73,$99,$BF,$C5,$9F,$0C,$22,$71,$05,$7B,$CD,$57,$3F,$00
    db $F4,$32,$1F,$3C,$47,$EC,$AF,$FB,$A8,$F5,$51,$B5,$5F,$A3,$9B,$30,$7A,$22,$12,$D3,$27,$00
    db $36,$C5,$A1,$B2,$47,$DF,$32,$CC,$7F,$16,$C5,$FD,$5A,$17,$03,$8C,$81,$54,$B9,$DC,$36,$00
    db $D2,$20,$48,$57,$0C,$CA,$98,$C4,$1D,$BA,$1F,$6F,$AD,$D1,$F6,$47,$40,$02,$83,$38,$18,$00
    db $95,$8A,$14,$5D,$1B,$A3,$71,$28,$15,$B7,$10,$C9,$6F,$71,$C8,$54,$6E,$76,$41,$32,$3B,$00
    db $EA,$D8,$CD,$9D,$DC,$28,$97,$E9,$EB,$28,$D2,$4E,$D4,$7D,$D8,$00,$1F,$28,$11,$0E,$31,$00
    db $84,$C8,$7A,$79,$55,$84,$F5,$6D,$10,$D4,$2A,$D1,$FA,$81,$0E,$2C,$F2,$48,$96,$33,$25,$00
    db $A9,$43,$F9,$2F,$F3,$03,$44,$20,$3E,$18,$EC,$49,$C5,$40,$6C,$27,$16,$D8,$1C,$75,$24,$00
    db $81,$D0,$30,$E7,$29,$E5,$79,$5F,$FA,$8A,$4C,$6C,$A0,$81,$26,$E1,$E5,$8F,$6F,$B7,$18,$00
    db $4D,$AC,$C7,$66,$38,$AB,$E5,$BB,$A5,$CC,$47,$7A,$E2,$21,$FA,$57,$DA,$D2,$D8,$63,$1F,$00
    db $04,$84,$F3,$F8,$98,$1B,$23,$4C,$BA,$B5,$F1,$31,$CC,$20,$C5,$87,$13,$0A,$FA,$EB,$0B,$00
    db $1C,$FE,$33,$89,$D3,$B8,$2D,$B9,$D7,$4B,$A6,$B7,$5D,$5C,$79,$61,$E2,$BB,$22,$85,$37,$00
    db $0B,$28,$ED,$1C,$EB,$82,$B9,$BD,$8B,$AD,$57,$E9,$52,$4E,$A2,$AE,$2F,$B2,$EF,$88,$23,$00
    db $D3,$F1,$A6,$A0,$EA,$08,$E2,$DA,$2A,$8C,$5E,$07,$9D,$2F,$72,$3F,$B6,$18,$E7,$BD,$2A,$00
    db $91,$9C,$20,$1F,$39,$44,$25,$4C,$52,$13,$A8,$AB,$B9,$C1,$3C,$97,$81,$34,$BB,$C3,$0A,$00
    db $CE,$40,$7D,$49,$99,$0F,$EA,$3E,$F7,$20,$E7,$5E,$E4,$63,$EA,$E4,$A9,$43,$87,$A8,$25,$00
    db $13,$E9,$EF,$B4,$53,$9E,$3C,$65,$DB,$EF,$AE,$35,$88,$05,$A2,$B2,$C5,$EE,$D7,$8B,$0C,$00
    db $2A,$14,$06,$E5,$B6,$CC,$4A,$B6,$2A,$52,$FF,$78,$EA,$CE,$D1,$82,$AC,$CD,$A5,$00,$37,$00
    db $8D,$BD,$0B,$B0,$0A,$35,$BE,$0E,$5A,$83,$9A,$78,$65,$64,$50,$7F,$26,$84,$AF,$7E,$35,$00
    db $B8,$F2,$9E,$67,$B0,$8E,$84,$29,$9A,$83,$99,$2E,$AC,$FC,$A9,$45,$2A,$22,$D2,$71,$0B,$00
    db $1E,$EE,$78,$EA,$45,$ED,$7A,$C7,$F8,$42,$11,$F1,$F0,$21,$C7,$91,$88,$FC,$65,$1E,$21,$00
    db $7C,$A2,$B5,$B0,$7B,$10,$97,$8B,$7F,$CF,$3C,$F8,$68,$A8,$86,$FB,$D5,$94,$5B,$96,$3B,$00
    db $AA,$9F,$7E,$09,$CF,$82,$B7,$BD,$1E,$3C,$F3,$BD,$B0,$47,$B3,$8A,$33,$CB,$A0,$06,$29,$00
    db $0D,$34,$36,$62,$F9,$18,$53,$96,$77,$30,$EC,$C8,$AD,$A2,$B3,$C0,$2F,$FD,$44,$C1,$2F,$00
    db $B7,$99,$71,$1B,$31,$11,$25,$8B,$4F,$95,$35,$A9,$6E,$7D,$36,$BC,$99,$0C,$E2,$16,$1C,$00
    db $97,$9B,$01,$86,$DB,$93,$A1,$26,$FB,$C2,$93,$BB,$39,$85,$AE,$2E,$A5,$25,$DE,$BB,$2C,$00
    db $1B,$E6,$FE,$40,$37,$9A,$8A,$A8,$F3,$3C,$48,$C1,$29,$71,$4F,$A4,$67,$82,$E5,$83,$18,$00
    db $4B,$77,$E5,$9E,$FF,$0D,$F1,$E0,$F0,$B9,$90,$16,$1F,$85,$75,$0B,$03,$D9,$51,$F8,$40,$00
    db $BF,$3B,$47,$2C,$AA,$F5,$B6,$43,$4A,$CC,$BC,$F6,$E7,$BF,$96,$5A,$00,$8B,$6B,$D4,$3C,$00
    db $DE,$78,$3E,$BF,$61,$B9,$05,$07,$F5,$C8,$A3,$87,$05,$76,$98,$48,$5D,$F8,$F1,$49,$11,$00
    db $5A,$FE,$18,$9E,$C9,$0A,$74,$90,$6B,$3D,$66,$45,$D0,$AF,$B3,$9C,$6D,$D9,$2C,$D1,$18,$00
    db $15,$61,$8B,$06,$75,$30,$22,$C0,$96,$93,$26,$4D,$A2,$71,$5A,$ED,$3E,$54,$F1,$78,$10,$00
    db $9B,$50,$F4,$A7,$2B,$8B,$A2,$E6,$EF,$08,$78,$F9,$57,$52,$18,$5F,$0E,$EB,$23,$8F,$3E,$00
    db $66,$9A,$59,$4E,$13,$1B,$71,$84,$49,$72,$1F,$D0,$E9,$25,$52,$96,$F5,$3A,$DF,$8B,$17,$00
    db $47,$EC,$67,$D7,$9C,$EF,$ED,$A7,$D9,$8F,$F0,$4C,$3A,$2F,$BE,$3B,$6F,$E9,$07,$C6,$0F,$00
    db $9E,$9F,$EA,$32,$EF,$BC,$B6,$35,$01,$A0,$A5,$76,$63,$30,$3B,$44,$6F,$25,$36,$DC,$07,$00
    db $F5,$FF,$B4,$F4,$CF,$34,$D1,$FC,$D1,$A6,$FE,$F1,$9D,$0C,$5E,$1F,$6A,$11,$6E,$A4,$2B,$00
    db $46,$4F,$20,$C0,$E9,$EF,$EB,$05,$ED,$73,$EA,$9A,$EE,$23,$DB,$A6,$4E,$35,$06,$56,$2E,$00
    db $96,$81,$01,$B3,$85,$BF,$F4,$87,$31,$3A,$12,$ED,$60,$97,$B1,$F6,$10,$F3,$73,$60,$41,$00
    db $64,$F4,$15,$6B,$51,$4A,$02,$A0,$F8,$A8,$C3,$14,$65,$FC,$40,$2B,$F1,$10,$48,$0F,$34,$00
    db $A7,$27,$17,$4F,$C7,$BB,$85,$70,$19,$F8,$1C,$6E,$E1,$CD,$D6,$6A,$27,$9E,$9F,$D8,$19,$00
    db $AA,$B2,$BE,$47,$D2,$AF,$3B,$CE,$96,$D3,$E0,$B5,$65,$B2,$FF,$3C,$B2,$8C,$AE,$37,$10,$00
    db $5D,$45,$8B,$D3,$3C,$1F,$AB,$18,$31,$B5,$D7,$34,$EC,$19,$B6,$74,$C1,$1B,$A3,$63,$14,$00
    db $E3,$7D,$DA,$63,$E9,$62,$30,$96,$82,$A4,$91,$FF,$13,$A1,$F2,$C3,$FC,$EF,$BF,$A7,$0C,$00
    db $F5,$EE,$26,$A6,$C5,$98,$3F,$3B,$63,$F0,$2B,$D1,$4A,$28,$53,$FC,$4B,$DA,$66,$34,$1A,$00
    db $23,$E5,$62,$3D,$F3,$FF,$C3,$F2,$FA,$C3,$BB,$AA,$CF,$35,$BB,$5A,$D0,$C2,$D2,$D4,$17,$00
    db $A3,$AE,$A9,$EC,$E9,$35,$C4,$F9,$6E,$16,$08,$A2,$06,$96,$64,$02,$AF,$22,$4A,$06,$1C,$00
    db $C7,$AD,$10,$02,$5B,$A4,$0E,$49,$31,$5D,$E1,$66,$BF,$9E,$2B,$E5,$97,$98,$67,$5A,$14,$00
    db $82,$34,$07,$2C,$A8,$E2,$C8,$AD,$49,$18,$5B,$02,$BA,$9C,$E6,$71,$03,$33,$F0,$87,$1C,$00
    db $91,$0C,$8B,$77,$1B,$32,$6C,$C4,$31,$F7,$1C,$4C,$F0,$96,$62,$91,$5D,$14,$08,$BE,$2A,$00
    db $9F,$B7,$26,$B0,$86,$09,$93,$39,$1D,$CC,$09,$D4,$80,$44,$77,$E3,$66,$6A,$F6,$DD,$0F,$00
    db $78,$50,$CE,$C7,$79,$25,$8A,$3E,$85,$5D,$F8,$0D,$4C,$2C,$2E,$39,$A4,$8A,$E7,$F8,$3A,$00
    db $7C,$86,$DA,$46,$80,$18,$FA,$EA,$48,$1C,$30,$50,$85,$EF,$5A,$53,$61,$BE,$83,$BC,$07,$00
    db $35,$49,$06,$14,$3A,$15,$38,$BC,$90,$14,$8A,$98,$52,$F4,$81,$21,$F3,$0D,$52,$C3,$38,$00
    db $34,$59,$05,$60,$42,$7B,$EF,$82,$36,$3F,$09,$B5,$DB,$00,$5B,$18,$63,$90,$ED,$CB,$42,$00
    db $97,$F4,$BE,$CE,$83,$B2,$C3,$C2,$F3,$98,$3F,$1F,$E1,$B8,$DF,$AE,$E5,$A6,$0D,$51,$1D,$00
    db $FD,$7A,$D5,$1F,$A5,$B8,$D3,$59,$EC,$63,$5F,$5F,$20,$9E,$FC,$5A,$58,$30,$3A,$B7,$25,$00
    db $0E,$40,$57,$5E,$3C,$E1,$4A,$B1,$13,$D9,$FC,$8F,$8A,$FA,$AC,$04,$90,$B1,$EA,$0E,$16,$00
    db $D9,$3F,$15,$FD,$51,$91,$35,$96,$D7,$C3,$E4,$84,$7F,$05,$79,$13,$52,$89,$D5,$A9,$33,$00
    db $DB,$84,$AC,$7F,$40,$E3,$7A,$64,$AE,$AB,$91,$2F,$27,$81,$1F,$CC,$E5,$E5,$36,$8B,$2A,$00
    db $00,$AD,$70,$B5,$71,$DB,$64,$DD,$91,$6E,$1B,$E9,$88,$0C,$64,$70,$40,$8C,$13,$87,$16,$00
    db $7E,$EA,$C0,$76,$83,$A1,$72,$95,$9F,$2B,$38,$BF,$44,$68,$C3,$F3,$F8,$90,$EB,$17,$44,$00
    db $34,$60,$03,$34,$80,$E8,$82,$87,$C2,$15,$0C,$36,$F7,$2F,$CE,$78,$DB,$91,$B2,$21,$32,$00
    db $22,$D0,$F0,$D9,$3A,$94,$95,$4D,$7B,$17,$78,$F7,$7A,$C1,$E4,$9B,$27,$7E,$CA,$93,$34,$00
    db $34,$E6,$C4,$0A,$DD,$53,$E8,$3D,$30,$DD,$C9,$C0,$3A,$41,$3E,$3D,$3C,$A4,$B9,$77,$42,$00
    db $AA,$71,$85,$2A,$B6,$F6,$FF,$24,$DE,$A3,$D0,$8D,$6F,$64,$61,$28,$B8,$D5,$62,$10,$3C,$00
    db $D2,$64,$9C,$4F,$27,$6D,$F5,$F2,$3E,$48,$02,$18,$46,$4C,$B4,$89,$49,$21,$4D,$6C,$07,$00
    db $97,$F8,$FE,$99,$C1,$EF,$CE,$09,$F9,$DA,$13,$34,$E7,$AA,$D7,$1F,$0C,$72,$42,$CE,$30,$00
    db $6C,$F7,$E4,$BF,$9C,$69,$B1,$EC,$CF,$88,$A9,$B5,$4F,$D7,$03,$AF,$34,$4C,$4E,$8C,$2A,$00
    db $53,$1C,$A9,$15,$CD,$FC,$E9,$CF,$F1,$83,$62,$C3,$49,$0E,$93,$97,$C2,$01,$B2,$96,$2D,$00
    db $FA,$AD,$85,$FC,$B1,$64,$B0,$C5,$70,$55,$F5,$17,$DF,$BD,$BA,$F7,$70,$5E,$AA,$81,$29,$00
    db $18,$DD,$83,$CD,$66,$31,$96,$3B,$35,$32,$6C,$97,$67,$46,$42,$F1,$CA,$9D,$A3,$B2,$3A,$00
    db $D9,$12,$D2,$96,$B6,$93,$F1,$33,$46,$37,$EE,$F8,$D9,$26,$DE,$BC,$5A,$54,$FC,$2C,$2D,$00
    db $E4,$87,$84,$3D,$63,$3D,$2E,$BD,$24,$95,$AE,$AB,$64,$89,$ED,$62,$E0,$A7,$7B,$6A,$2C,$00
    db $83,$FD,$0C,$24,$AC,$06,$79,$EC,$9E,$02,$D2,$6E,$C7,$5B,$FA,$26,$34,$44,$A1,$72,$0B,$00
    db $B7,$47,$DE,$DA,$72,$3A,$CE,$9A,$45,$34,$68,$4C,$2D,$0A,$C1,$55,$F7,$82,$07,$DF,$40,$00
    db $9B,$8B,$0A,$51,$D7,$95,$9E,$94,$14,$60,$B5,$30,$60,$E7,$C9,$F0,$1A,$35,$9E,$CE,$35,$00
    db $D6,$F5,$8F,$35,$07,$46,$6A,$88,$5B,$08,$1A,$47,$AA,$64,$5F,$77,$21,$F5,$04,$84,$0A,$00
    db $69,$5D,$A3,$4A,$89,$5C,$0F,$D6,$0E,$A9,$68,$97,$80,$38,$FF,$F7,$71,$69,$DB,$E8,$1B,$00
    db $1F,$7D,$EB,$A8,$64,$6D,$C3,$B3,$B8,$7A,$66,$74,$2D,$A2,$C8,$23,$E7,$3F,$05,$B7,$1E,$00
    db $12,$E2,$7B,$12,$AA,$C6,$D9,$3D,$6A,$31,$6E,$D8,$25,$7D,$9C,$B8,$1A,$AA,$C8,$65,$1C,$00
    db $B0,$E2,$76,$84,$13,$90,$47,$E7,$CD,$B9,$1D,$FC,$3B,$DA,$EF,$B3,$7E,$08,$4A,$95,$37,$00
    db $10,$00,$8F,$E9,$3C,$19,$95,$71,$0F,$3D,$A1,$24,$75,$BF,$03,$B7,$FC,$28,$4F,$87,$38,$00
    db $BD,$5F,$F1,$16,$F3,$D0,$51,$33,$45,$AD,$2C,$D2,$88,$FE,$72,$44,$CD,$A0,$82,$AE,$0F,$00
    db $21,$5C,$6A,$2B,$FD,$DA,$3C,$FE,$AE,$D8,$26,$E1,$24,$DC,$29,$01,$30,$B5,$44,$CB,$34,$00
    db $4C,$5D,$58,$18,$A2,$24,$58,$B3,$76,$FA,$43,$FF,$D0,$90,$3A,$13,$F2,$4D,$93,$56,$31,$00
    db $BA,$06,$60,$76,$0A,$69,$F1,$19,$E4,$59,$13,$B0,$6F,$EC,$D0,$D2,$C6,$93,$10,$44,$0E,$00
    db $2A,$16,$67,$4D,$62,$E3,$1F,$19,$8E,$AD,$7F,$AD,$D7,$DD,$07,$9D,$7C,$73,$CD,$9B,$24,$00

; ----------------------------------------------------------------------------------------------
; This is the java program that converts the string values of the big numbers to arrays of bytes
; I didn't have time to implement it in Z80
; outputs the internal java representation of big integer into a little endian z80 assembler format
; an extra $00 is added at the end of each number because if each number can be stored as a 168bit number,
; the sum is a 172bit number.

import java.math.BigInteger;

class Main
{
	static String[] s = {
			"37107287533902102798797998220837590246510135740250",
			"46376937677490009712648124896970078050417018260538",
			"74324986199524741059474233309513058123726617309629",
			"91942213363574161572522430563301811072406154908250",
			"23067588207539346171171980310421047513778063246676",
			"89261670696623633820136378418383684178734361726757",
			"28112879812849979408065481931592621691275889832738",
			"44274228917432520321923589422876796487670272189318",
			"47451445736001306439091167216856844588711603153276",
			"70386486105843025439939619828917593665686757934951",
			"62176457141856560629502157223196586755079324193331",
			"64906352462741904929101432445813822663347944758178",
			"92575867718337217661963751590579239728245598838407",
			"58203565325359399008402633568948830189458628227828",
			"80181199384826282014278194139940567587151170094390",
			"35398664372827112653829987240784473053190104293586",
			"86515506006295864861532075273371959191420517255829",
			"71693888707715466499115593487603532921714970056938",
			"54370070576826684624621495650076471787294438377604",
			"53282654108756828443191190634694037855217779295145",
			"36123272525000296071075082563815656710885258350721",
			"45876576172410976447339110607218265236877223636045",
			"17423706905851860660448207621209813287860733969412",
			"81142660418086830619328460811191061556940512689692",
			"51934325451728388641918047049293215058642563049483",
			"62467221648435076201727918039944693004732956340691",
			"15732444386908125794514089057706229429197107928209",
			"55037687525678773091862540744969844508330393682126",
			"18336384825330154686196124348767681297534375946515",
			"80386287592878490201521685554828717201219257766954",
			"78182833757993103614740356856449095527097864797581",
			"16726320100436897842553539920931837441497806860984",
			"48403098129077791799088218795327364475675590848030",
			"87086987551392711854517078544161852424320693150332",
			"59959406895756536782107074926966537676326235447210",
			"69793950679652694742597709739166693763042633987085",
			"41052684708299085211399427365734116182760315001271",
			"65378607361501080857009149939512557028198746004375",
			"35829035317434717326932123578154982629742552737307",
			"94953759765105305946966067683156574377167401875275",
			"88902802571733229619176668713819931811048770190271",
			"25267680276078003013678680992525463401061632866526",
			"36270218540497705585629946580636237993140746255962",
			"24074486908231174977792365466257246923322810917141",
			"91430288197103288597806669760892938638285025333403",
			"34413065578016127815921815005561868836468420090470",
			"23053081172816430487623791969842487255036638784583",
			"11487696932154902810424020138335124462181441773470",
			"63783299490636259666498587618221225225512486764533",
			"67720186971698544312419572409913959008952310058822",
			"95548255300263520781532296796249481641953868218774",
			"76085327132285723110424803456124867697064507995236",
			"37774242535411291684276865538926205024910326572967",
			"23701913275725675285653248258265463092207058596522",
			"29798860272258331913126375147341994889534765745501",
			"18495701454879288984856827726077713721403798879715",
			"38298203783031473527721580348144513491373226651381",
			"34829543829199918180278916522431027392251122869539",
			"40957953066405232632538044100059654939159879593635",
			"29746152185502371307642255121183693803580388584903",
			"41698116222072977186158236678424689157993532961922",
			"62467957194401269043877107275048102390895523597457",
			"23189706772547915061505504953922979530901129967519",
			"86188088225875314529584099251203829009407770775672",
			"11306739708304724483816533873502340845647058077308",
			"82959174767140363198008187129011875491310547126581",
			"97623331044818386269515456334926366572897563400500",
			"42846280183517070527831839425882145521227251250327",
			"55121603546981200581762165212827652751691296897789",
			"32238195734329339946437501907836945765883352399886",
			"75506164965184775180738168837861091527357929701337",
			"62177842752192623401942399639168044983993173312731",
			"32924185707147349566916674687634660915035914677504",
			"99518671430235219628894890102423325116913619626622",
			"73267460800591547471830798392868535206946944540724",
			"76841822524674417161514036427982273348055556214818",
			"97142617910342598647204516893989422179826088076852",
			"87783646182799346313767754307809363333018982642090",
			"10848802521674670883215120185883543223812876952786",
			"71329612474782464538636993009049310363619763878039",
			"62184073572399794223406235393808339651327408011116",
			"66627891981488087797941876876144230030984490851411",
			"60661826293682836764744779239180335110989069790714",
			"85786944089552990653640447425576083659976645795096",
			"66024396409905389607120198219976047599490197230297",
			"64913982680032973156037120041377903785566085089252",
			"16730939319872750275468906903707539413042652315011",
			"94809377245048795150954100921645863754710598436791",
			"78639167021187492431995700641917969777599028300699",
			"15368713711936614952811305876380278410754449733078",
			"40789923115535562561142322423255033685442488917353",
			"44889911501440648020369068063960672322193204149535",
			"41503128880339536053299340368006977710650566631954",
			"81234880673210146739058568557934581403627822703280",
			"82616570773948327592232845941706525094512325230608",
			"22918802058777319719839450180888072429661980811197",
			"77158542502016545090413245809786882778948721859617",
			"72107838435069186155435662884062257473692284509516",
			"20849603980134001723930671666823555245252804609722",
			"53503534226472524250874054075591789781264330331690"
	};

	public static void main(String[] args) {

		for ( String n : s) {
			byte[] bc = new BigInteger( n ).toByteArray();
			System.out.print( "\n    db " );
			for ( int i = bc.length - 1; i >= 0; System.out.printf("$%02X%s," , bc[ i ] & 0xff, i-- > 0 ? "" : ",$00" ) );
		}
	}
}
    
