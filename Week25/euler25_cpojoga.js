// I will not use BigInt this time, but an array to store the number digits
// Function to sum 2 arrays
const sum = (ar1, ar2) => {
    const res = [...ar1]; 
    // Creates a copy of the second array, and add 0 to it if it's shorter than the first array
    const a2 = ar1.length > ar2.length ? [0, ...ar2] : [...ar2]; 

    for (let i = res.length - 1; i >= 0; i--) {
        let carry = Math.trunc((res[i] + a2[i]) / 10);
        res[i] = (res[i] + a2[i]) % 10;

        if (carry) {
            i > 0 ? res[i - 1] += carry : res.unshift(carry);
        }
    }
    return res;
}

let i = 2;
let arr1 = [1]; // F0
let arr2 = [1]; // F1

while (arr1.length < 1000) {
    [arr1, arr2] = [sum(arr1, arr2), arr1]; // Use ES6 destructuring to swap the values [a, b] = [b, a];
    i++;
}
console.log('Fibonacci(', i, '): \n', arr1.join(''));

// Fibonacci( 4782 ): 
// "1070066266382758936764980584457396885083683896632151665013235203375314520604694040621889147582489792657804694888177591957484
// 33646667256995951299603046126274809248218614406943305123477444275027378175308757939166619214925918675955396642283714894311307
// 46995034395470019854326097230672901928705264472437261177158218255484911205250132014786129659313817922355596574520395061375514
// 67837543229119602129934048260706175397706847068202895486902666185435124521900369480641357447470911707619766945691070098024393
// 43961747410373691250323136553216477369702316775505159517351846057995491941096777837322966579658164651390348815425631018422419
// 02598460880001101862555502454939371136516570394476295847145485234259504285824253060835444354282126110089928637950480068943303
// 09773217834864543113205765659868456288616808718693835297350643986297640660000723562917905207051164077614812491885830945940566
// 688339109350944456576357666151619317753792891661581327159616877487983821820492520348473874384736771934512787029218636250627816"