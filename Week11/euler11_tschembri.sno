* Euler 11 in SNOBOL4
* Can be tested @ https://tio.run/#snobol4
  
    M       = ARRAY("20,20")
    c       = ARRAY("20")
    c<1>    = "0802229738150040007504050778521250779108"
    c<2>    = "4949994017811857608717409843694804566200"
    c<3>    = "8149317355791429937140675388300349133665"
    c<4>    = "5270952304601142692468560132567137023691"
    c<5>    = "2231167151676389419236542240402866331380"
    c<6>    = "2447326099034502447533537836842035171250"
    c<7>    = "3298812864236710263840675954706618386470"
    c<8>    = "6726206802621220956394396308409166499421"
    c<9>    = "2455580566739926971778789683148834896372"
    c<10>   = "2136230975007644204535140061339734313395"
    c<11>   = "7817532822753167159403800462161409535692"
    c<12>   = "1639054296353147555888240017542436298557"
    c<13>   = "8656004835718907054444374460215851541758"
    c<14>   = "1980816805944769287392138652177704895540"
    c<15>   = "0452088397359916079757321626267933279866"
    c<16>   = "8836688757622072034633674655123263935369"
    c<17>   = "0442167338253911249472180846293240627636"
    c<18>   = "2069364172302388346299698267598574043616"
    c<19>   = "2073352978319001743149714886811623570554"
    c<20>   = "0170547183515469169233486143520189196748"

* Initializes the two dimension array    
      
    I       = 1
L1  J       = 1
L2  M<I,J>  = SUBSTR( c<I>, ( J * 2 ) - 1, 2 ) 
    J       = J + 1
    LE(J,20)                                        :S(L2)
    I       = I + 1
    LE(I,20)                                        :S(L1)    

* horizontal/vertical products

    MAX     = 0
    I       = 1
L3  J       = 1
L4  P       = M<I,J> * M<I,J + 1> * M<I,J + 2> * M<I,J + 3>     
    GT(P,MAX)                                       :F(L5)
    MAX     = P
L5 P       = M<I,J> * M<J + 1,I> * M<J + 2,I> * M<J + 3,I>
    GT(P,MAX)                                       :F(L6)
    MAX     = P    
L6  J       = J + 1
    LE(J,16)                                        :S(L4)
    I       = I + 1
    LE(I,20)                                        :S(L3)
     
* diagonal products

    I       = 1
L7  J       = 1
L8  P       = M<I,J> * M<I + 1,J + 1> * M<I + 2,J + 2> * M<I + 3,J + 3>
    GT(P,MAX)                                       :F(L9)
    MAX     = P
L9  J       = J + 1
    LE(J,16)                                        :S(L8)
    I       = I + 1
    LE(I,16)                                        :S(L7)

    I       = 4
L10 J       = 1
L11 P       = M<I,J> * M<I - 1,J + 1> * M<I - 2,J + 2> * M<I - 3,J + 3>
    GT(P,MAX)                                       :F(L12)
    MAX     = P
L12 J       = J + 1
    LE(J,16)                                        :S(L11)    
    I       = I + 1
    LE(I,20)                                        :S(L10)


* display result    
    
    OUTPUT = MAX
    
END
